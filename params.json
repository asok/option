{"name":"Option","tagline":"Ruby implementation of Scala's Option Monad","body":"# Option\r\n\r\nA Ruby port of Scala's Option monad. Tries to be faithful\r\nbut also pragmatic in RE: to duck typing.\r\n\r\nBlog post: http://robares.com/2012/09/16/ruby-port-of-scala-option/\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'option'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install option\r\n\r\n## Usage\r\n\r\nGenerally, you want to use the Option(A) wrapper method to box\r\nyour value. This will make the right decision as to what your initial\r\nvalue should be:\r\n\r\n```ruby\r\nfoo = Option(\"bar\")\r\n```\r\n\r\nThis will allow you to now manipulate the value in the box via various means:\r\n\r\n```ruby\r\n\r\n# get the value\r\nfoo.get #=> \"bar\"\r\n\r\n# return a default if the box is None\r\nNone.get_or_else { \"default\" } #=> \"default\"\r\n\r\n# map the value to another option\r\nfoo.map { |v| v.upcase } #=> Some(\"BAR\")\r\n\r\n# does the value meet a requirement?\r\nfoo.exists? { |v| v == \"bar\" } #=> true\r\n\r\n# return the value or nil depending on the state\r\nfoo.or_nil #=> \"bar\"\r\n\r\n# chain values\r\nfoo.map { |v| v * 2 }.map { |v| v.upcase }.get_or_else { \"missing\" } #=> BARBAR\r\n\r\n# attempt to extract a value but default if None\r\nNone.fold(-> { \"missing\" }) { |v| v.upcase } #=> missing\r\n\r\n# filter values returning an option\r\nfoo.filter { |v| v == \"baz\" } #=> None\r\n\r\n# Side-effects\r\nfoo.inside { |v| v.upcase! } #=> Some(\"BAR\")\r\n\r\n# use in a for loop\r\nfor value in foo\r\n  puts value #=> bar\r\nend\r\n```\r\n\r\n## Build Status\r\n[![Travis CI](https://secure.travis-ci.org/rares/option.png)](http://travis-ci.org/rares/option)\r\n\r\n## Code Climate\r\n[![Code Climate](https://codeclimate.com/github/rares/option.png)](https://codeclimate.com/github/rares/option)\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Implement your feature. Patches not considered without accompanying tests.  \r\n4. Commit your changes (`git commit -am 'Added some feature'`)\r\n5. Push to the branch (`git push origin my-new-feature`)\r\n6. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}